[gd_scene load_steps=2 format=3 uid="uid://bjqruh3060gpp"]

[sub_resource type="GDScript" id="GDScript_scyv6"]
script/source = "extends InventoryController

signal item_selected(index: int)

func _ready() -> void:
	get_viewport().gui_focus_changed.connect(_on_focus_changed)
	%ItemList.focus_neighbor_left = \"../%s\" % focus_neighbor_left
	%ItemList.focus_neighbor_top = \"../%s\" % focus_neighbor_top
	%ItemList.focus_neighbor_right = \"../%s\" % focus_neighbor_right
	%ItemList.focus_neighbor_bottom = \"../%s\" % focus_neighbor_bottom
	%ItemList.focus_next = \"../%s\" % focus_next
	%ItemList.focus_previous = \"../%s\" % focus_previous
	if inventory:
		inventory.inventory_updated.connect(update_inventory_item_list)

func _on_focus_changed(control: Control) -> void:
	if control.has_method(\"pass_focus_to_child\"):
		pass_focus_to_child(%ItemList)

func pass_focus_to_child(control: Control) -> void:
	control.grab_focus()

func get_item_count() -> int:
	return %ItemList.item_count

func get_item(index) -> InventoryItem:
	return inventory.items[index]

func clear() -> void:
	%ItemList.clear()

func get_selected_items() -> Array:
	return %ItemList.get_selected_items()
	
func size():
	return %ItemList.item_count

func get_item_text(index: int) -> String:
	return %ItemList.get_item_text(index)

func set_inventory(newInventory: Inventory) -> void:
	if inventory and inventory.inventory_updated.is_connected(update_inventory_item_list):
		inventory.inventory_updated.disconnect(update_inventory_item_list)

	inventory = newInventory
	if newInventory:
		newInventory.inventory_updated.connect(update_inventory_item_list)
		update_inventory_item_list()

func update_inventory_item_list() -> void:	
	print(name, \" - update_inventory_item_list\")
	clear()
	var counts : Dictionary = {}
	for each_item_key in inventory.items:
		if inventory.items[each_item_key].name in counts:
			counts[inventory.items[each_item_key].name] += 1
		else:
			counts[inventory.items[each_item_key].name] = 1

	var sorted_keys =  counts.keys()
	sorted_keys.sort()
	for item_name in sorted_keys:
		%ItemList.add_item(\"%dx %s\" % [counts[item_name], item_name])
	

func get_selected_item_name() -> String:
	var selected_index = %ItemList.get_selected_items()[0]
	var selected_text = %ItemList.get_item_text(selected_index)
	return selected_text.substr(selected_text.find(\"x\") + 2)

func _on_item_list_item_selected(index: int) -> void:
	item_selected.emit(index)
"

[node name="InventoryItemList" type="Control"]
layout_mode = 3
anchors_preset = 0
script = SubResource("GDScript_scyv6")

[node name="ItemList" type="ItemList" parent="."]
unique_name_in_owner = true
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_bottom = -32.0
grow_horizontal = 2
grow_vertical = 2

[connection signal="item_selected" from="ItemList" to="." method="_on_item_list_item_selected"]
